{"version":3,"sources":["images/stopwatch.png","components/Timer/timerSound.mp3","images/soundOn.png","images/soundOff.png","components/Navigation/Navigation.js","components/Stopwatch/Stopwatch.js","components/Timer/Timer.js","components/Timer/timeLeft.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","activeTab","useStoreState","state","navigation","setActiveTab","useStoreActions","className","onClick","Stopwatch","useState","active","setActive","seconds","setSeconds","useEffect","interval","setInterval","Math","round","clearInterval","src","stopwatchImg","alt","time","minutes","floor","milliseconds","toString","split","undefined","length","console","log","formatTime","disabled","Timer","inputMinutes","useRef","inputSeconds","inputStart","inputSound","hours","setTime","secondsLeft","setSecondsLeft","timerActive","setTimerActive","pause","setPause","soundOn","setSoundOn","current","play","setTotalTime","totalTime","parseInt","updateProp","prop","value","focus","timeLeft","placeholder","type","onChange","e","target","ref","soundOnImg","soundOffImg","timerSound","store","createStore","action","payload","App","page","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.30496d34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stopwatch.50d6852d.png\";","module.exports = __webpack_public_path__ + \"static/media/timerSound.de1489aa.mp3\";","module.exports = __webpack_public_path__ + \"static/media/soundOn.b2fc898f.png\";","module.exports = __webpack_public_path__ + \"static/media/soundOff.8a415529.png\";","import React from \"react\";\r\nimport { useStoreState, useStoreActions } from \"easy-peasy\";\r\n\r\nconst Navigation = () => {\r\n  const activeTab = useStoreState(state => state.navigation.activeTab);\r\n  const setActiveTab = useStoreActions(state => state.navigation.setActiveTab);\r\n\r\n  return (\r\n    <div className=\"Navigation\">\r\n      <button\r\n        className={`tab ${activeTab === \"timer\" && \"active\"}`}\r\n        onClick={() => setActiveTab(\"timer\")}\r\n      >\r\n        Timer\r\n      </button>\r\n      <button\r\n        className={`tab ${activeTab === \"stopwatch\" && \"active\"}`}\r\n        onClick={() => setActiveTab(\"stopwatch\")}\r\n      >\r\n        StopWatch\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport stopwatchImg from \"../../images/stopwatch.png\";\r\n\r\n// Add picture of stopwatch\r\n// Add reset button\r\n\r\nconst Stopwatch = () => {\r\n  const [active, setActive] = useState(false);\r\n  const [seconds, setSeconds] = useState(55);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // console.log(active);\r\n      if (active === true) {\r\n        setSeconds(seconds => Math.round((seconds + 1 / 40) * 100) / 100);\r\n      }\r\n    }, 1000 / 40);\r\n    return () => clearInterval(interval);\r\n  }, [active]);\r\n\r\n  const restart = () => {\r\n    setActive(false);\r\n    setSeconds(0);\r\n  };\r\n\r\n  const formatTime = time => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    let milliseconds = time.toString().split(\".\")[1];\r\n    if (milliseconds === undefined) {\r\n      milliseconds = \"00\";\r\n    }\r\n    if (milliseconds.length === 1) {\r\n      milliseconds += \"0\";\r\n    }\r\n    console.log(milliseconds.length);\r\n\r\n    return (\r\n      <Fragment>\r\n        {minutes > 0 ? (\r\n          <Fragment>\r\n            {minutes}\r\n            <span className=\"letter\">m</span>\r\n          </Fragment>\r\n        ) : (\r\n          \"\"\r\n        )}{\" \"}\r\n        {seconds}\r\n        <span className=\"letter\">s</span> {milliseconds}\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"Stopwatch\">\r\n      <img\r\n        src={stopwatchImg}\r\n        alt=\"stopwatch\"\r\n        className={`pic ${active && \"active\"}`}\r\n      />\r\n      <div className=\"time-passed\">{formatTime(seconds)}</div>\r\n      <div className=\"controllers\">\r\n        <button className=\"start\" onClick={() => setActive(!active)}>\r\n          {active ? \"Stop\" : \"Start\"}\r\n        </button>\r\n        <button\r\n          className=\"restart\"\r\n          disabled={seconds === 0}\r\n          onClick={() => restart()}\r\n        >\r\n          Restart\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stopwatch;\r\n","import React, { Fragment, useState, useEffect, useRef } from \"react\";\r\nimport timeLeft from \"./timeLeft\";\r\nimport timerSound from \"./timerSound.mp3\";\r\n\r\nimport soundOnImg from \"../../images/soundOn.png\";\r\nimport soundOffImg from \"../../images/soundOff.png\";\r\n\r\nconst Timer = () => {\r\n  const inputMinutes = useRef();\r\n  const inputSeconds = useRef();\r\n  const inputStart = useRef();\r\n  const inputSound = useRef();\r\n\r\n  const [time, setTime] = useState({\r\n    hours: \"\",\r\n    minutes: \"\",\r\n    seconds: \"\"\r\n  });\r\n  const [secondsLeft, setSecondsLeft] = useState(0);\r\n  const [timerActive, setTimerActive] = useState(false);\r\n  const [pause, setPause] = useState(false);\r\n  const [soundOn, setSoundOn] = useState(true);\r\n\r\n  const start = () => setTimerActive(true);\r\n\r\n  const reset = () => {\r\n    setTimerActive(false);\r\n    setSecondsLeft(0);\r\n  };\r\n\r\n  // Play sound when timer finishes\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timerActive && secondsLeft === 0 && soundOn) {\r\n        inputSound.current.play();\r\n      } else {\r\n        // eslint-disable-next-line\r\n        inputSound.current.pause();\r\n      }\r\n    };\r\n  }, [secondsLeft, timerActive, soundOn]);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    if (timerActive && secondsLeft > 0) {\r\n      interval = setInterval(() => {\r\n        if (!pause) {\r\n          setSecondsLeft(secondsLeft - 1);\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      setTimerActive(false);\r\n      setTotalTime();\r\n    }\r\n    return () => {\r\n      console.log(\"this\", timerActive, secondsLeft);\r\n      clearInterval(interval);\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [timerActive, secondsLeft, pause]);\r\n\r\n  useEffect(() => {\r\n    setTotalTime();\r\n    // eslint-disable-next-line\r\n  }, [time]);\r\n\r\n  const setTotalTime = () => {\r\n    const { hours } = time || 0;\r\n    const { minutes } = time || 0;\r\n    const { seconds } = time || 0;\r\n\r\n    const totalTime = parseInt(hours * 3600 + minutes * 60 + seconds);\r\n    setSecondsLeft(totalTime);\r\n  };\r\n\r\n  const updateProp = (prop, value) => {\r\n    if (value.length <= 2) {\r\n      setTime({ ...time, [prop]: parseInt(value) });\r\n    }\r\n    if (prop === \"hours\" && value.length === 2) {\r\n      console.log(prop, inputMinutes.current.focus());\r\n      console.log(\"Let's move to the next input\");\r\n    }\r\n    if (prop === \"minutes\" && value.length === 2) {\r\n      console.log(prop, inputSeconds.current.focus());\r\n      console.log(\"Let's move to the next input\");\r\n    }\r\n    if (prop === \"seconds\" && value.length === 2) {\r\n      console.log(prop, inputStart.current.focus());\r\n      console.log(\"Let's move to the next input\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Timer\">\r\n      {timerActive ? (\r\n        <div className=\"time-left\">Time left: {timeLeft(secondsLeft)}</div>\r\n      ) : (\r\n        <div className=\"inputs\">\r\n          <div className=\"input\">\r\n            <input\r\n              value={time.hours}\r\n              placeholder=\"00h\"\r\n              type=\"number\"\r\n              onChange={e => updateProp(\"hours\", e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"input\">\r\n            <input\r\n              value={time.minutes}\r\n              ref={inputMinutes}\r\n              placeholder=\"00m\"\r\n              type=\"number\"\r\n              onChange={e => updateProp(\"minutes\", e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"input\">\r\n            <input\r\n              value={time.seconds}\r\n              ref={inputSeconds}\r\n              placeholder=\"00s\"\r\n              type=\"number\"\r\n              onChange={e => updateProp(\"seconds\", e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"controllers\">\r\n        {timerActive ? (\r\n          <Fragment>\r\n            <button\r\n              type=\"button\"\r\n              className=\"pause\"\r\n              onClick={() => setPause(!pause)}\r\n            >\r\n              {pause ? \"Play\" : \"Stop\"}\r\n            </button>\r\n            <button type=\"button\" className=\"reset\" onClick={() => reset()}>\r\n              Reset\r\n            </button>\r\n          </Fragment>\r\n        ) : (\r\n          <button\r\n            type=\"button\"\r\n            ref={inputStart}\r\n            className=\"start\"\r\n            disabled={secondsLeft === 0}\r\n            onClick={() => start()}\r\n          >\r\n            Start\r\n          </button>\r\n        )}\r\n        <button className=\"sound\" onClick={() => setSoundOn(!soundOn)}>\r\n          {soundOn ? (\r\n            <img src={soundOnImg} alt=\"soundOn\" />\r\n          ) : (\r\n            <img src={soundOffImg} alt=\"soundOff\" />\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"sound\">\r\n        <audio ref={inputSound} src={timerSound}></audio>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","export default function timeLeft(time) {\r\n  let seconds = time % 60;\r\n  if (seconds < 10) seconds = \"0\" + seconds;\r\n  let minutes = Math.floor(time / 60);\r\n  let hours = Math.floor(time / 3600);\r\n  if (time >= 3600) {\r\n    minutes = minutes % 60;\r\n    if (minutes < 10) minutes = \"0\" + minutes;\r\n    return `${hours}:${minutes}:${seconds}`;\r\n  } else {\r\n    return `${minutes}:${seconds}`;\r\n  }\r\n}\r\n","import { createStore, action } from \"easy-peasy\";\r\n\r\nconst store = createStore({\r\n  navigation: {\r\n    activeTab: \"stopwatch\",\r\n    setActiveTab: action((state, payload) => {\r\n      state.activeTab = payload;\r\n    })\r\n  }\r\n});\r\n\r\nexport default store;\r\n","import React, { Fragment } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Stopwatch from \"./components/Stopwatch/Stopwatch\";\nimport Timer from \"./components/Timer/Timer\";\nimport \"./scss/main.css\";\n\nimport { StoreProvider, useStoreState } from \"easy-peasy\";\n\nimport store from \"./store\";\n\nconst App = () => {\n  const activeTab = useStoreState(state => state.navigation.activeTab);\n  const page = activeTab === \"timer\" ? <Timer /> : <Stopwatch />;\n\n  return (\n    <Fragment>\n      <div className=\"App\">\n        <Navigation />\n        {page}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default () => (\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}